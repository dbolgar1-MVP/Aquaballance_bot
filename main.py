import os
import asyncio
from fastapi import FastAPI, HTTPException, Request
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
KEEPALIVE_TOKEN = os.getenv("KEEPALIVE_TOKEN", "pingme")  # –¥–ª—è /health
if not TELEGRAM_TOKEN:
    raise RuntimeError("Missing TELEGRAM_TOKEN")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# --- –≤–∞—à–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã (–ø—Ä–∏–º–µ—Ä) ---
@dp.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é –±–µ–∑ –≤–µ–±—Ö—É–∫–∞ ‚Äî —á–µ—Ä–µ–∑ Long Polling üê†")

# --- FastAPI (—Ç–æ–ª—å–∫–æ —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç) ---
app = FastAPI()

@app.get("/health")
async def health(request: Request, token: str | None = None):
    if token != KEEPALIVE_TOKEN:
        raise HTTPException(status_code=403, detail="forbidden")
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    # —Ç—É—Ç –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î/–º–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Ç.–ø.
    app.state.poller = asyncio.create_task(dp.start_polling(bot))

@app.on_event("shutdown")
async def on_shutdown():
    poller: asyncio.Task = app.state.poller
    poller.cancel()
    try:
        await poller
    except:
        pass
    await bot.session.close()
