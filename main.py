import os
import psycopg2
from psycopg2.pool import SimpleConnectionPool
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")
if not DATABASE_URL:
    raise RuntimeError("DATABASE_URL is not set")

# –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–Ω–æ—Å—ã
DATABASE_URL = DATABASE_URL.strip()

# –î–æ–±–∞–≤–ª—è–µ–º sslmode=require, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
if "sslmode=" not in DATABASE_URL:
    sep = "&" if "?" in DATABASE_URL else "?"
    DATABASE_URL = f"{DATABASE_URL}{sep}sslmode=require"

print(f"[INFO] Connecting to DB: {DATABASE_URL}")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
db_pool: SimpleConnectionPool | None = None

def init_db_pool():
    global db_pool
    if db_pool is None:
        try:
            db_pool = SimpleConnectionPool(minconn=1, maxconn=5, dsn=DATABASE_URL)
            print("[INFO] Database connection pool created successfully.")
        except Exception as e:
            print(f"[ERROR] Database connection failed: {e}")
            raise

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üê† –Ø —Ä–∞–±–æ—Ç–∞—é –±–µ–∑ –≤–µ–±—Ö—É–∫–∞, —á–µ—Ä–µ–∑ long polling!")

@dp.message_handler(commands=["add_aquarium"])
async def add_aquarium_cmd(message: types.Message):
    try:
        conn = db_pool.getconn()
        cur = conn.cursor()
        cur.execute("INSERT INTO aquariums (name) VALUES (%s)", ("–ú–æ–π –∞–∫–≤–∞—Ä–∏—É–º",))
        conn.commit()
        cur.close()
        db_pool.putconn(conn)
        await message.answer("–ê–∫–≤–∞—Ä–∏—É–º –¥–æ–±–∞–≤–ª–µ–Ω! ‚úÖ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–≤–∞—Ä–∏—É–º–∞: {e}")

@dp.message_handler(commands=["list_aquariums"])
async def list_aquariums_cmd(message: types.Message):
    try:
        conn = db_pool.getconn()
        cur = conn.cursor()
        cur.execute("SELECT id, name FROM aquariums")
        rows = cur.fetchall()
        cur.close()
        db_pool.putconn(conn)

        if not rows:
            await message.answer("–ê–∫–≤–∞—Ä–∏—É–º–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = "\n".join([f"{row[0]}. {row[1]}" for row in rows])
            await message.answer(f"–°–ø–∏—Å–æ–∫ –∞–∫–≤–∞—Ä–∏—É–º–æ–≤:\n{text}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

if __name__ == "__main__":
    init_db_pool()
    executor.start_polling(dp, skip_updates=True)
