import os
import math
import asyncio
import logging
from datetime import datetime
from typing import Optional, Dict, Any, List, Tuple

from dotenv import load_dotenv
import psycopg2
from psycopg2.pool import SimpleConnectionPool

from fastapi import FastAPI
from fastapi.responses import JSONResponse

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
)

# =============== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===============
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("aquaballance")

# =============== ENV ===============
load_dotenv()
BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
DATABASE_URL = (os.getenv("DATABASE_URL") or "").strip()

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")
if not DATABASE_URL:
    raise RuntimeError("DATABASE_URL is not set")

# –¥–æ–±–∞–≤–∏–º sslmode=require –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
if "sslmode=" not in DATABASE_URL:
    sep = "&" if "?" in DATABASE_URL else "?"
    DATABASE_URL = f"{DATABASE_URL}{sep}sslmode=require"

# =============== –ë–î –ü–£–õ ===============
db_pool: Optional[SimpleConnectionPool] = None

def init_db_pool():
    global db_pool
    if db_pool is None:
        db_pool = SimpleConnectionPool(minconn=1, maxconn=5, dsn=DATABASE_URL)
        log.info("‚úÖ DB pool created")

def db_exec(sql: str, params: Tuple | None = None, fetch: str = "none"):
    """
    sync helper (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ executor –Ω–∏–∂–µ)
    fetch: "one" | "all" | "none"
    """
    assert db_pool is not None, "DB pool is not initialized"
    conn = db_pool.getconn()
    try:
        with conn:
            with conn.cursor() as cur:
                cur.execute(sql, params or ())
                if fetch == "one":
                    return cur.fetchone()
                if fetch == "all":
                    return cur.fetchall()
                return None
    finally:
        db_pool.putconn(conn)

async def adb_exec(sql: str, params: Tuple | None = None, fetch: str = "none"):
    """async wrapper —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop"""
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, db_exec, sql, params, fetch)

# =============== –°–•–ï–ú–ê (ensure) ===============
SCHEMA_SQL = r"""
CREATE TABLE IF NOT EXISTS users (
    user_id BIGINT PRIMARY KEY,
    username TEXT,
    first_seen TIMESTAMPTZ DEFAULT now(),
    active_aquarium_id INTEGER
);

CREATE TABLE IF NOT EXISTS aquariums (
    id SERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    volume_l NUMERIC(10,2),
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_aquariums_user ON aquariums(user_id);

CREATE TABLE IF NOT EXISTS aquarium_fish (
    id SERIAL PRIMARY KEY,
    aquarium_id INTEGER NOT NULL REFERENCES aquariums(id) ON DELETE CASCADE,
    species TEXT NOT NULL,
    qty INTEGER NOT NULL CHECK (qty > 0),
    added_at TIMESTAMPTZ DEFAULT now()
);

CREATE TABLE IF NOT EXISTS aquarium_plants (
    id SERIAL PRIMARY KEY,
    aquarium_id INTEGER NOT NULL REFERENCES aquariums(id) ON DELETE CASCADE,
    species TEXT NOT NULL,
    qty INTEGER NOT NULL CHECK (qty > 0),
    added_at TIMESTAMPTZ DEFAULT now()
);

-- –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–º–µ–Ω
CREATE TABLE IF NOT EXISTS water_settings (
    aquarium_id INTEGER PRIMARY KEY REFERENCES aquariums(id) ON DELETE CASCADE,
    change_volume_pct NUMERIC(5,2),
    period_days INTEGER
);

-- –ò–∑–º–µ—Ä–µ–Ω–∏—è –≤–æ–¥—ã
CREATE TABLE IF NOT EXISTS measurements (
    id SERIAL PRIMARY KEY,
    aquarium_id INTEGER NOT NULL REFERENCES aquariums(id) ON DELETE CASCADE,
    measured_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    ph NUMERIC(4,2),
    kh NUMERIC(5,2),
    gh NUMERIC(5,2),
    no2 NUMERIC(6,3),
    no3 NUMERIC(6,2),
    tan NUMERIC(6,3),          -- total ammonia (NH3+NH4), mg/L
    nh3 NUMERIC(6,3),          -- free ammonia, mg/L (—Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ–º)
    nh4 NUMERIC(6,3),          -- ammonium, mg/L (—Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ–º)
    po4 NUMERIC(6,2),
    temperature_c NUMERIC(5,2),
    notes TEXT
);
CREATE INDEX IF NOT EXISTS idx_meas_aq_time ON measurements(aquarium_id, measured_at DESC);
"""

async def ensure_schema():
    await adb_exec(SCHEMA_SQL)

# =============== NH3 / NH4 –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† ===============
def nh3_fraction(pH: float, temp_c: float) -> float:
    """
    –î–æ–ª—è NH3 –∏–∑ TAN –ø–æ —Ñ–æ—Ä–º—É–ª–µ Emerson et al. (1975) –¥–ª—è –ø—Ä–µ—Å–Ω–æ–π –≤–æ–¥—ã.
    pKa = 0.09018 + 2729.92 / (273.15 + T)
    fraction_NH3 = 1 / (1 + 10^(pKa - pH))
    """
    t_k = 273.15 + float(temp_c)
    pKa = 0.09018 + (2729.92 / t_k)
    frac = 1.0 / (1.0 + pow(10.0, (pKa - float(pH))))
    return max(0.0, min(1.0, frac))

def split_tan_to_nh3_nh4(tan: float, pH: float, temp_c: float) -> Tuple[float, float]:
    tan = max(0.0, float(tan))
    frac = nh3_fraction(pH, temp_c)
    nh3 = tan * frac
    nh4 = tan - nh3
    return nh3, nh4

# =============== –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –†–´–ë/–†–ê–°–¢–ï–ù–ò–ô (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫) ===============
FISH_GUIDE = {
    # –Ω–∞–∑–≤–∞–Ω–∏–µ: (pH_min, pH_max, GH_min, GH_max, T_min, T_max, NO2_max, NH3_max)
    "–≥—É–ø–ø–∏": (6.8, 8.2, 6, 18, 22, 28, 0.1, 0.02),
    "–Ω–µ–æ–Ω": (5.0, 7.2, 1, 10, 22, 26, 0.05, 0.01),
    "—Å–∫–∞–ª—è—Ä–∏—è": (6.0, 7.5, 3, 12, 24, 30, 0.1, 0.02),
    "–∑–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞": (6.5, 8.0, 5, 20, 18, 24, 0.1, 0.02),
}

PLANT_GUIDE = {
    # –Ω–∞–∑–≤–∞–Ω–∏–µ: (pH_min, pH_max, GH_min, GH_max, T_min, T_max, NO3_min, NO3_max, PO4_min, PO4_max)
    "–∞–Ω—É–±–∏–∞—Å": (6.0, 8.0, 3, 15, 22, 28, 5, 30, 0.2, 2.0),
    "—Ä–æ–≥–æ–ª–∏—Å—Ç–Ω–∏–∫": (6.0, 8.0, 3, 18, 18, 28, 1, 20, 0.1, 1.5),
    "—ç–ª–æ–¥–µ—è": (6.5, 8.0, 4, 18, 18, 28, 1, 20, 0.1, 1.5),
}

def check_fish_compat(meas: Dict[str, float], species: str) -> Tuple[bool, List[str]]:
    sp = FISH_GUIDE.get(species.lower())
    if not sp:
        return True, [f"–ù–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ø–æ '{species}'. –î–æ–±–∞–≤–ª–µ–Ω–æ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏."]
    ph, gh, t, no2, nh3 = meas.get("ph"), meas.get("gh"), meas.get("temperature_c"), meas.get("no2"), meas.get("nh3")
    (pH_min, pH_max, GH_min, GH_max, T_min, T_max, NO2_max, NH3_max) = sp
    probs = []
    if ph is not None and (ph < pH_min or ph > pH_max):
        probs.append(f"pH –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {pH_min}-{pH_max}")
    if gh is not None and (gh < GH_min or gh > GH_max):
        probs.append(f"GH –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {GH_min}-{GH_max}")
    if t is not None and (t < T_min or t > T_max):
        probs.append(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {T_min}-{T_max}¬∞C")
    if no2 is not None and no2 > NO2_max:
        probs.append(f"NO‚ÇÇ –≤—ã—Å–æ–∫–æ–µ (> {NO2_max} –º–≥/–ª)")
    if nh3 is not None and nh3 > NH3_max:
        probs.append(f"NH‚ÇÉ –≤—ã—Å–æ–∫–æ–µ (> {NH3_max} –º–≥/–ª)")
    return (len(probs) == 0), probs

def check_plant_compat(meas: Dict[str, float], species: str) -> Tuple[bool, List[str]]:
    sp = PLANT_GUIDE.get(species.lower())
    if not sp:
        return True, [f"–ù–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ø–æ '{species}'. –î–æ–±–∞–≤–ª–µ–Ω–æ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏."]
    ph, gh, t, no3, po4 = meas.get("ph"), meas.get("gh"), meas.get("temperature_c"), meas.get("no3"), meas.get("po4")
    (pH_min, pH_max, GH_min, GH_max, T_min, T_max, NO3_min, NO3_max, PO4_min, PO4_max) = sp
    probs = []
    if ph is not None and (ph < pH_min or ph > pH_max):
        probs.append(f"pH –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {pH_min}-{pH_max}")
    if gh is not None and (gh < GH_min or gh > GH_max):
        probs.append(f"GH –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {GH_min}-{GH_max}")
    if t is not None and (t < T_min or t > T_max):
        probs.append(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {T_min}-{T_max}¬∞C")
    if no3 is not None and (no3 < NO3_min or no3 > NO3_max):
        probs.append(f"NO‚ÇÉ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {NO3_min}-{NO3_max} –º–≥/–ª")
    if po4 is not None and (po4 < PO4_min or po4 > PO4_max):
        probs.append(f"PO‚ÇÑ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {PO4_min}-{PO4_max} –º–≥/–ª")
    return (len(probs) == 0), probs

# =============== UI –ö–ù–û–ü–ö–ò ===============
def main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ê–∫–≤–∞—Ä–∏—É–º"), KeyboardButton(text="üìÉ –ê–∫–≤–∞—Ä–∏—É–º—ã")],
            [KeyboardButton(text="üß™ –ò–∑–º–µ—Ä–µ–Ω–∏–µ"), KeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫")],
            [KeyboardButton(text="üêü –î–æ–±–∞–≤–∏—Ç—å —Ä—ã–±—É"), KeyboardButton(text="üåø –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã")]
        ],
        resize_keyboard=True
    )

def aquariums_inline(rows: List[Tuple[int, str]], action_prefix: str) -> InlineKeyboardMarkup:
    buttons = []
    for aq_id, name in rows:
        buttons.append([InlineKeyboardButton(text=f"{aq_id} ‚Ä¢ {name}", callback_data=f"{action_prefix}:{aq_id}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# =============== –ë–û–¢ ===============
bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
r = Router()
dp.include_router(r)

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ----------
async def ensure_user(user_id: int, username: Optional[str]):
    row = await adb_exec("SELECT 1 FROM users WHERE user_id=%s", (user_id,), "one")
    if not row:
        await adb_exec("INSERT INTO users(user_id, username) VALUES(%s,%s)", (user_id, username), "none")

async def get_active_aq(user_id: int) -> Optional[int]:
    row = await adb_exec("SELECT active_aquarium_id FROM users WHERE user_id=%s", (user_id,), "one")
    if row and row[0]:
        return int(row[0])
    return None

async def get_last_meas(aq_id: int) -> Optional[Dict[str, float]]:
    row = await adb_exec("""
        SELECT ph, gh, temperature_c, no2, no3, tan, nh3, nh4, po4
        FROM measurements
        WHERE aquarium_id=%s
        ORDER BY measured_at DESC
        LIMIT 1
    """, (aq_id,), "one")
    if not row:
        return None
    cols = ["ph", "gh", "temperature_c", "no2", "no3", "tan", "nh3", "nh4", "po4"]
    return {cols[i]: (None if row[i] is None else float(row[i])) for i in range(len(cols))}

def parse_kv_args(s: str) -> Dict[str, float]:
    """
    –ü—Ä–∏–º–µ—Ä: "ph=7.2 gh=8 kh=4 no2=0.02 no3=10 tan=0.2 po4=0.5 t=25"
    –ö–ª—é—á–∏: ph, gh, kh, no2, no3, tan, po4, t|temp
    """
    out = {}
    for chunk in s.split():
        if "=" not in chunk:
            continue
        k, v = chunk.split("=", 1)
        k = k.strip().lower()
        v = v.strip().replace(",", ".")
        try:
            out[k] = float(v)
        except:
            pass
    return out

# ---------- –ö–û–ú–ê–ù–î–´ ----------
@r.message(Command("start"))
async def cmd_start(m: Message):
    await ensure_user(m.from_user.id, m.from_user.username)
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø üê† <b>Aquaballance</b>.\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–¥—ã, –ø—Ä–æ–≤–µ—Ä—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä—ã–±/—Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add_aquarium <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–æ–±—ä—ë–º_–ª]\n"
        "‚Ä¢ /list_aquariums ‚Äî —Å–ø–∏—Å–æ–∫ –∏ –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ\n"
        "‚Ä¢ /add_measure ph=.. gh=.. kh=.. no2=.. no3=.. tan=.. po4=.. t=..\n"
        "‚Ä¢ /history [N] ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∏–∑–º–µ—Ä–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)\n"
        "‚Ä¢ /add_fish <–≤–∏–¥> <–∫–æ–ª-–≤–æ>\n"
        "‚Ä¢ /add_plant <–≤–∏–¥> <–∫–æ–ª-–≤–æ>\n"
        "‚Ä¢ /suggest ‚Äî —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–∑–º–µ—Ä–µ–Ω–∏—è–º\n"
        "‚Ä¢ /chart <–º–µ—Ç—Ä–∏–∫–∞> [N] ‚Äî –≥—Ä–∞—Ñ–∏–∫ (ph/no3/nh3 –∏ —Ç.–¥.)\n",
        reply_markup=main_menu()
    )

@r.message(F.text == "üìÉ –ê–∫–≤–∞—Ä–∏—É–º—ã")
@r.message(Command("list_aquariums"))
async def list_aquariums(m: Message):
    await ensure_user(m.from_user.id, m.from_user.username)
    rows = await adb_exec("SELECT id, name FROM aquariums WHERE user_id=%s ORDER BY id", (m.from_user.id,), "all")
    if not rows:
        await m.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫–≤–∞—Ä–∏—É–º–æ–≤. –î–æ–±–∞–≤—å: /add_aquarium <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–æ–±—ä—ë–º_–ª]")
        return
    kb = aquariums_inline([(r[0], r[1]) for r in rows], "setactive")
    await m.answer("–í—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–≤–∞—Ä–∏—É–º:", reply_markup=kb)

@r.callback_query(F.data.startswith("setactive:"))
async def set_active_cb(cq: CallbackQuery):
    aq_id = int(cq.data.split(":")[1])
    # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∞–∫–≤–∞—Ä–∏—É–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    row = await adb_exec("SELECT 1 FROM aquariums WHERE id=%s AND user_id=%s", (aq_id, cq.from_user.id), "one")
    if not row:
        await cq.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    await adb_exec("UPDATE users SET active_aquarium_id=%s WHERE user_id=%s", (aq_id, cq.from_user.id))
    await cq.message.edit_text(f"–ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–≤–∞—Ä–∏—É–º: <b>{aq_id}</b>")
    await cq.answer("–ì–æ—Ç–æ–≤–æ!")

@r.message(F.text == "‚ûï –ê–∫–≤–∞—Ä–∏—É–º")
async def shortcut_add_aq(m: Message):
    await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_aquarium <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–æ–±—ä—ë–º_–ª]")

@r.message(Command("add_aquarium"))
async def add_aquarium(m: Message):
    await ensure_user(m.from_user.id, m.from_user.username)
    parts = (m.text or "").split(maxsplit=2)
    if len(parts) < 2:
        await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_aquarium <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–æ–±—ä—ë–º_–ª]")
        return
    name = parts[1].strip()
    volume = None
    if len(parts) == 3:
        try:
            volume = float(parts[2].replace(",", "."))
        except:
            volume = None
    await adb_exec(
        "INSERT INTO aquariums(user_id, name, volume_l) VALUES(%s,%s,%s)",
        (m.from_user.id, name, volume)
    )
    # –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–µ—Ç ‚Äî –Ω–∞–∑–Ω–∞—á–∏–º
    active = await get_active_aq(m.from_user.id)
    if not active:
        row = await adb_exec("SELECT id FROM aquariums WHERE user_id=%s ORDER BY id DESC LIMIT 1",
                             (m.from_user.id,), "one")
        if row:
            await adb_exec("UPDATE users SET active_aquarium_id=%s WHERE user_id=%s", (row[0], m.from_user.id))
    await m.answer(f"‚úÖ –ê–∫–≤–∞—Ä–∏—É–º ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_menu())

@r.message(F.text == "üß™ –ò–∑–º–µ—Ä–µ–Ω–∏–µ")
async def shortcut_measure(m: Message):
    await m.answer("–ü—Ä–∏–º–µ—Ä:\n"
                   "<code>/add_measure ph=7.2 gh=8 kh=4 no2=0.02 no3=10 tan=0.2 po4=0.5 t=25</code>")

@r.message(Command("add_measure"))
async def add_measure(m: Message):
    user_id = m.from_user.id
    aq_id = await get_active_aq(user_id)
    if not aq_id:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–≤–∞—Ä–∏—É–º: /list_aquariums")
        return
    kv = parse_kv_args(m.text or "")
    # –º–∞–ø–ø–∏–Ω–≥ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª—é—á–µ–π
    ph = kv.get("ph")
    kh = kv.get("kh")
    gh = kv.get("gh")
    no2 = kv.get("no2")
    no3 = kv.get("no3")
    tan = kv.get("tan")
    po4 = kv.get("po4")
    t = kv.get("t") or kv.get("temp") or kv.get("temperature") or kv.get("temperature_c")
    nh3 = nh4 = None
    if tan is not None and ph is not None and t is not None:
        nh3, nh4 = split_tan_to_nh3_nh4(tan, ph, t)

    await adb_exec("""
        INSERT INTO measurements (aquarium_id, ph, kh, gh, no2, no3, tan, nh3, nh4, po4, temperature_c)
        VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)
    """, (aq_id, ph, kh, gh, no2, no3, tan, nh3, nh4, po4, t))
    txt = "‚úÖ –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ."
    if nh3 is not None and nh4 is not None:
        txt += f"\n–†–∞—Å—á—ë—Ç: NH‚ÇÉ={nh3:.3f} –º–≥/–ª, NH‚ÇÑ={nh4:.3f} –º–≥/–ª"
    await m.answer(txt)

@r.message(Command("history"))
async def history(m: Message):
    user_id = m.from_user.id
    aq_id = await get_active_aq(user_id)
    if not aq_id:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–≤–∞—Ä–∏—É–º: /list_aquariums")
        return
    parts = (m.text or "").split()
    limit = 5
    if len(parts) == 2:
        try:
            limit = max(1, min(30, int(parts[1])))
        except:
            pass
    rows = await adb_exec("""
        SELECT measured_at, ph, kh, gh, no2, no3, tan, nh3, nh4, po4, temperature_c
        FROM measurements WHERE aquarium_id=%s
        ORDER BY measured_at DESC LIMIT %s
    """, (aq_id, limit), "all")
    if not rows:
        await m.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ: /add_measure ...")
        return
    lines = []
    for r in rows:
        t = r[0].strftime("%Y-%m-%d %H:%M")
        ph, kh, gh, no2, no3, tan, nh3, nh4, po4, tc = r[1:11]
        lines.append(
            f"‚Ä¢ {t}  pH={ph} KH={kh} GH={gh} NO‚ÇÇ={no2} NO‚ÇÉ={no3} TAN={tan} NH‚ÇÉ={nh3} NH‚ÇÑ={nh4} PO‚ÇÑ={po4} T={tc}¬∞C"
        )
    await m.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è:\n" + "\n".join(lines))

@r.message(F.text == "üêü –î–æ–±–∞–≤–∏—Ç—å —Ä—ã–±—É")
async def shortcut_fish(m: Message):
    await m.answer("–ü—Ä–∏–º–µ—Ä: <code>/add_fish –≥—É–ø–ø–∏ 5</code>")

@r.message(Command("add_fish"))
async def add_fish(m: Message):
    user_id = m.from_user.id
    aq_id = await get_active_aq(user_id)
    if not aq_id:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–≤–∞—Ä–∏—É–º: /list_aquariums")
        return
    parts = (m.text or "").split(maxsplit=2)
    if len(parts) < 3:
        await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_fish <–≤–∏–¥> <–∫–æ–ª-–≤–æ>")
        return
    species = parts[1].strip()
    try:
        qty = int(parts[2])
    except:
        await m.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
    meas = await get_last_meas(aq_id) or {}
    ok, probs = check_fish_compat(meas, species)
    await adb_exec("INSERT INTO aquarium_fish (aquarium_id, species, qty) VALUES (%s,%s,%s)", (aq_id, species, qty))
    if ok:
        await m.answer(f"‚úÖ ¬´{species}¬ª x{qty} –¥–æ–±–∞–≤–ª–µ–Ω—ã. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: OK.")
    else:
        await m.answer("‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è:\n- " + "\n- ".join(probs))

@r.message(F.text == "üåø –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")
async def shortcut_plant(m: Message):
    await m.answer("–ü—Ä–∏–º–µ—Ä: <code>/add_plant –∞–Ω—É–±–∏–∞—Å 3</code>")

@r.message(Command("add_plant"))
async def add_plant(m: Message):
    user_id = m.from_user.id
    aq_id = await get_active_aq(user_id)
    if not aq_id:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–≤–∞—Ä–∏—É–º: /list_aquariums")
        return
    parts = (m.text or "").split(maxsplit=2)
    if len(parts) < 3:
        await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_plant <–≤–∏–¥> <–∫–æ–ª-–≤–æ>")
        return
    species = parts[1].strip()
    try:
        qty = int(parts[2])
    except:
        await m.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return

    meas = await get_last_meas(aq_id) or {}
    ok, probs = check_plant_compat(meas, species)
    await adb_exec("INSERT INTO aquarium_plants (aquarium_id, species, qty) VALUES (%s,%s,%s)", (aq_id, species, qty))
    if ok:
        await m.answer(f"‚úÖ ¬´{species}¬ª x{qty} –¥–æ–±–∞–≤–ª–µ–Ω—ã. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: OK.")
    else:
        await m.answer("‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è:\n- " + "\n- ".join(probs))

@r.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def shortcut_settings(m: Message):
    await m.answer("–ü—Ä–∏–º–µ—Ä:\n"
                   "<code>/set_water_change 30 7</code>\n"
                   "–æ–∑–Ω–∞—á–∞–µ—Ç 30% –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π.")

@r.message(Command("set_water_change"))
async def set_water_change(m: Message):
    user_id = m.from_user.id
    aq_id = await get_active_aq(user_id)
    if not aq_id:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–≤–∞—Ä–∏—É–º: /list_aquariums")
        return
    parts = (m.text or "").split()
    if len(parts) != 3:
        await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_water_change <–ø—Ä–æ—Ü–µ–Ω—Ç> <–ø–µ—Ä–∏–æ–¥_–¥–Ω–µ–π>")
        return
    try:
        pct = float(parts[1].replace(",", "."))
        days = int(parts[2])
    except:
        await m.answer("–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª.")
        return
    await adb_exec("""
        INSERT INTO water_settings(aquarium_id, change_volume_pct, period_days)
        VALUES (%s,%s,%s)
        ON CONFLICT (aquarium_id) DO UPDATE
        SET change_volume_pct=EXCLUDED.change_volume_pct,
            period_days=EXCLUDED.period_days
    """, (aq_id, pct, days))
    await m.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–º–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {pct}% –∫–∞–∂–¥—ã–µ {days} –¥–Ω.")

@r.message(F.text == "üí° –°–æ–≤–µ—Ç—ã")
@r.message(Command("suggest"))
async def suggest(m: Message):
    user_id = m.from_user.id
    aq_id = await get_active_aq(user_id)
    if not aq_id:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–≤–∞—Ä–∏—É–º: /list_aquariums")
        return
    meas = await get_last_meas(aq_id)
    if not meas:
        await m.answer("–ù–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π. –î–æ–±–∞–≤—å: /add_measure ...")
        return
    tips = []
    if meas.get("nh3") is not None and meas["nh3"] > 0.02:
        tips.append("NH‚ÇÉ –≤—ã—Å–æ–∫–∏–π ‚Äî —Å—Ä–æ—á–Ω–æ –ø–æ–¥–º–µ–Ω–∞ 30‚Äì50%, —É—Å–∏–ª–∏—Ç—å –∞—ç—Ä–∞—Ü–∏—é.")
    if meas.get("no2") is not None and meas["no2"] > 0.1:
        tips.append("NO‚ÇÇ –≤—ã—Å–æ–∫–∏–π ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Ñ–∏–ª—å—Ç—Ä, –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É, –ø–æ–¥–º–µ–Ω–∞ –≤–æ–¥—ã.")
    if meas.get("no3") is not None and meas["no3"] > 30:
        tips.append("NO‚ÇÉ > 30 –º–≥/–ª ‚Äî —É–≤–µ–ª–∏—á—å —á–∞—Å—Ç–æ—Ç—É –ø–æ–¥–º–µ–Ω, –¥–æ–±–∞–≤—å –∂–∏–≤—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è.")
    if meas.get("ph") is not None and (meas["ph"] < 6.0 or meas["ph"] > 8.5):
        tips.append("pH –≤–Ω–µ 6.0‚Äì8.5 ‚Äî –ø—Ä–æ–≤–µ—Ä—å KH –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –ø–ª–∞–≤–Ω–æ.")
    if not tips:
        tips.append("–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –Ω–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã—Ö —Ä—ã–±. –ü—Ä–æ–¥–æ–ª–∂–∞–π –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.")
    await m.answer("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n- " + "\n- ".join(tips))

# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –æ–¥–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
@r.message(F.text == "üìà –ì—Ä–∞—Ñ–∏–∫")
async def shortcut_chart(m: Message):
    await m.answer("–ü—Ä–∏–º–µ—Ä: <code>/chart ph 20</code> (–º–µ—Ç—Ä–∏–∫–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫)")

@r.message(Command("chart"))
async def chart_cmd(m: Message):
    try:
        import matplotlib
        matplotlib.use("Agg")
        import matplotlib.pyplot as plt
    except Exception as e:
        await m.answer(f"–ú–æ–¥—É–ª—å matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        return

    user_id = m.from_user.id
    aq_id = await get_active_aq(user_id)
    if not aq_id:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–≤–∞—Ä–∏—É–º: /list_aquariums")
        return

    parts = (m.text or "").split()
    if len(parts) < 2:
        await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /chart <–º–µ—Ç—Ä–∏–∫–∞> [N]. –ú–µ—Ç—Ä–∏–∫–∏: ph, no3, nh3, po4, t")
        return
    metric = parts[1].lower()
    key_map = {"ph":"ph","no3":"no3","nh3":"nh3","po4":"po4","t":"temperature_c"}
    col = key_map.get(metric)
    if not col:
        await m.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞. –î–æ—Å—Ç—É–ø–Ω–æ: ph, no3, nh3, po4, t")
        return
    limit = 20
    if len(parts) >= 3:
        try:
            limit = max(3, min(100, int(parts[2])))
        except:
            pass

    rows = await adb_exec(
        f"SELECT measured_at, {col} FROM measurements WHERE aquarium_id=%s AND {col} IS NOT NULL ORDER BY measured_at DESC LIMIT %s",
        (aq_id, limit),
        "all"
    )
    if not rows:
        await m.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    xs = [r[0] for r in rows][::-1]
    ys = [float(r[1]) for r in rows][::-1]

    # —Ä–∏—Å—É–µ–º
    import matplotlib.pyplot as plt
    plt.figure()
    plt.plot(xs, ys, marker="o")
    plt.title(f"{metric.upper()} –¥–∏–Ω–∞–º–∏–∫–∞")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel(metric.upper())
    plt.tight_layout()
    path = "/tmp/chart.png"
    plt.savefig(path)
    plt.close()
    await bot.send_photo(m.chat.id, FSInputFile(path))

# =============== FASTAPI APP –î–õ–Ø HEALTH + –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –ü–û–†–¢–ê ===============
app = FastAPI()

@app.get("/health")
async def health():
    return JSONResponse({"ok": True, "service": "aquaballance-bot"})

@app.on_event("startup")
async def on_startup():
    init_db_pool()
    await ensure_schema()
    # –°—Ç–∞—Ä—Ç—É–µ–º –ª–æ–Ω–≥-–ø–æ–ª–ª–∏–Ω–≥ –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types()))

@app.on_event("shutdown")
async def on_shutdown():
    if db_pool:
        db_pool.closeall()
    await bot.session.close()

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: uvicorn main:app --reload
if __name__ == "__main__":
    # –ª–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–Ω—è—Ç—å uvicorn
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=int(os.getenv("PORT", "8000")))
